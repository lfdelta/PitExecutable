<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize properties

depth = 0;

xVelocity = 0;
yVelocity = 0;
yVelocityMax = 10;
moveSpeed = 5;
jumpSpeed = 7;
grav = 0.2;

isGrappling = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement and collisions

//Get key input
// Key -&gt; down; _h -&gt; held; _r -&gt; released
leftKey = keyboard_check(vk_left);
aKey = keyboard_check(ord('A'));
rightKey = keyboard_check(vk_right);
dKey = keyboard_check(ord('D'));
upKey = keyboard_check(vk_up);
wKey = keyboard_check(ord('W'));

hookshotSuccess = false;

if(mouse_check_button(mb_left)) {
    if(point_in_circle(mouse_x, mouse_y, x, y, 200) &amp;&amp; 
       place_meeting(mouse_x, mouse_y, obj_wall)) {
        vx = (mouse_x - x);
        vy = (mouse_y - y);
        
        lengthOfVector = sqrt(vx*vx + vy*vy);
        
        vx = (vx/lengthOfVector);
        vy = (vy/lengthOfVector);
        
        xVelocity = 5 * vx;
        yVelocity = 5 * vy;
        
        hookshotSuccess = true;
    }
}

//Interpret key input
if(!hookshotSuccess) {
    moveDirection = max(dKey,rightKey) - max(aKey,leftKey);
    xVelocity = moveDirection * moveSpeed;
    if (yVelocity &lt; yVelocityMax)
        yVelocity = min(yVelocity + grav, yVelocityMax);
    if (place_meeting(x, y+1, obj_player_collide))
        yVelocity = -max(wKey,upKey) * jumpSpeed;
}
   
   
//Collision handling
if (place_meeting(x+xVelocity, y, obj_player_collide)) {
   while (!place_meeting(x+sign(xVelocity), y, obj_player_collide))
         x += sign(xVelocity);
   xVelocity = 0;
}

if (place_meeting(x, y+yVelocity, obj_player_collide)) {
   while (!place_meeting(x, y+sign(yVelocity), obj_player_collide))
         y += sign(yVelocity);
   yVelocity = 0;
}



//Move player
x += xVelocity;
y += yVelocity;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite handling
image_xscale = sign(obj_player_arm.image_xscale) * abs(image_xscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player and hookshot guide

draw_self();

if(mouse_check_button(mb_left)) {
    if(!point_in_circle(mouse_x, mouse_y, x, y, 200) ||
       !place_meeting(mouse_x, mouse_y, obj_wall)) {
        draw_set_colour(c_red);
        draw_circle(x, y, 200, true);
    }
    else {
        draw_set_color(c_lime);
        draw_line(x, y, mouse_x, mouse_y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
