<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize properties

depth = 0;

xVelocity = 0;
yVelocity = 0;
yVelocityMax = 10;
moveSpeed = 5;
jumpSpeed = 7;
grav = 0.2;

grappleReach = 300;
grappleSpeed = 10;
grappleTo = noone;

hookshotSuccess = false;

grappleClickX = 0;
grappleClickY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player movement and collisions

//Get key input
// _Key -&gt; down; _KeyH -&gt; held; _KeyR -&gt; released
leftKey = keyboard_check(vk_left);
aKey = keyboard_check(ord('A'));
rightKey = keyboard_check(vk_right);
dKey = keyboard_check(ord('D'));
upKey = keyboard_check(vk_up);
wKey = keyboard_check(ord('W'));

//show_debug_message('hookshotSuccess: ' + string(hookshotSuccess));
//show_debug_message('grappleTo: ' + string(grappleTo));

// Attempt grapple
if (mouse_check_button(mb_left)){ 
    if(!hookshotSuccess &amp;&amp; !place_meeting(mouse_x, mouse_y, obj_player)) {
        theta = arctan2(mouse_y - y, mouse_x - x);
        grappleReachX = x + grappleReach * cos(theta);
        grappleReachY = y + grappleReach * sin(theta);
        grappleTo = RaycastToPoint(x, y, grappleReachX, grappleReachY, obj_anchor, false, true);
        
        // If grappleTo exists, player can grapple to it
        if(!is_undefined(grappleTo[0])) {
            hookshotSuccess = true;
        }
    }
    
    
    // Move player toward the grapple point
    if(hookshotSuccess) {
        vx = grappleTo[0] - x;
        vy = grappleTo[1] - y;
        
        //show_debug_message('x: ' + string(vx));
        //show_debug_message('y: ' + string(vy));
            
        lengthOfVector = sqrt(vx*vx + vy*vy);
            
        xVelocity = grappleSpeed * (vx/lengthOfVector);
        yVelocity = grappleSpeed * (vy/lengthOfVector);
    }
} else {
    hookshotSuccess = false;
    grappleTo = noone;
}

//Interpret key input
if (!hookshotSuccess) {
    moveDirection = max(dKey,rightKey) - max(aKey,leftKey);
    jumpKey = max(wKey, upKey);
    xVelocity = moveDirection * moveSpeed;
    if (yVelocity &lt; yVelocityMax)
        yVelocity = min(yVelocity + grav, yVelocityMax);
    if (place_meeting(x, y+1, obj_player_collide)) //Jump
        yVelocity = -jumpKey * jumpSpeed;
    if (yVelocity &lt; 0 &amp;&amp; (!jumpKey))
        yVelocity = max(yVelocity, -jumpSpeed/4);
}
   
//Collision handling
/*while (place_meeting(x+xVelocity, y, obj_player_collide) || place_meeting(x, y+yVelocity, obj_player_collide)) {
    //while (xVelocity || yVelocity) {
        if (place_meeting(x+sign(xVelocity), y, obj_player_collide)) {
            xVelocity = 0;
        } else {
            x += sign(xVelocity);
        }
        if (place_meeting(x, y+sign(yVelocity), obj_player_collide)) {
            yVelocity = 0;
        } else {
            y += sign(yVelocity);
        }
    //}
}*/

if (place_meeting(x+xVelocity, y, obj_player_collide)) {
   while (!place_meeting(x+sign(xVelocity), y, obj_player_collide))
         x += sign(xVelocity);
   xVelocity = 0;
}
if (place_meeting(x, y+yVelocity, obj_player_collide)) {
   while (!place_meeting(x, y+sign(yVelocity), obj_player_collide))
         y += sign(yVelocity);
   yVelocity = 0;
}

//Move player
if (yVelocity &gt; yVelocityMax)
   yVelocity = yVelocityMax;
x += xVelocity;
y += yVelocity;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite handling
image_xscale = sign(obj_player_arm.image_xscale) * abs(image_xscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player and hookshot guide

grappleReach = obj_player.grappleReach;
hookshotSuccess = obj_player.hookshotSuccess;
grappleTo = obj_player.grappleTo;

// Draw the player
draw_self();

if(mouse_check_button(mb_left)) {
    // Draw a circleto indicate grapple range if click is out of range
    if (!point_in_circle(mouse_x, mouse_y, x, y, grappleReach) || !hookshotSuccess) {
        draw_set_colour(c_red);
        draw_circle(x, y, grappleReach, true);
    }
    // If grapple was successful, draw the grapple line
    if (hookshotSuccess) {
        draw_set_color(c_lime);
        draw_line(x, y, grappleTo[0], grappleTo[1]);
        // does not accurately reflect the location being pulled to;
        // a slightly more advanced calculation is required
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
